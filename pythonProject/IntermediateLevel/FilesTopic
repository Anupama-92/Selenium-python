# Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (‘\n’) in Python by default.
# Binary files: In this type of file, there is no terminator for a line, and the data is stored after converting it into machine-understandable binary language.
The file handle is like a cursor, which defines from where the data has to be read or written in the file and we can get Python output in text file.
There are 6 File access modes in Python:
1. Read Only (‘r’)
2. Read and Write (‘r+’)
3. Write Only (‘w’)
4. Write and Read (‘w+’)
5. Append Only (‘a’)
6. Append and Read (‘a+’)
Read Only (‘r’) : Open text file for reading. The handle is positioned at the beginning of the file.
If the file does not exist, raises the I/O error. This is also the default mode in which a file is opened.
Read and Write (‘r+’): Open the file for reading and writing. The handle is positioned at the beginning of the file.
Raises I/O error if the file does not exist
Write Only (‘w’) : Open the file for writing. For the existing files, the data is truncated and over-written.
 The handle is positioned at the beginning of the file. Creates the file if the file does not exist.
Write and Read (‘w+’) : Open the file for reading and writing. For an existing file, data is truncated and over-written.
The handle is positioned at the beginning of the file.
Append Only (‘a’): Open the file for writing. The file is created if it does not exist. The handle is positioned at the end of the file.
The data being written will be inserted at the end, after the existing data.
Append and Read (‘a+’) : Open the file for reading and writing. The file is created if it does not exist.
The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.

Writing to a file in Python
There are two ways to write in a file:
Using write()
Using writelines()

Reading from a file in Python
There are three ways to read data from a text file:
Using read()
Using readline()
Using readlines()

rstrip(): This function strips each line of a file off spaces from the right-hand side.
lstrip(): This function strips each line of a file off spaces from the left-hand side.