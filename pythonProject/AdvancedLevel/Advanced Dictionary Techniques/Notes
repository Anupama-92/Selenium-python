Advanced dictionary techniques can help you write cleaner, more efficient, and more Pythonic code.
Here are some advanced dictionary techniques in Python:
1. Dictionary Comprehensions - They are similar to list comprehensions but allow you to create key-value pairs.
2. Merging Dictionaries - From Python 3.5 onwards, you can merge two dictionaries using the ** unpacking operator.
In Python 3.9, the | operator was introduced for dictionary merging.
3. Using defaultdict from collections - defaultdict is a subclass of the built-in dict class. It overrides one method and adds one writable instance variable.
 It provides a default value for a key that does not exist, avoiding the KeyError.
4. Using Counter from collections - Counter is a subclass of dict that is specifically designed for counting hashable objects.
It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.
5. Using OrderedDict from collections - OrderedDict remembers the order in which the keys were inserted.
This is especially useful when you need to display or operate on the dictionary data in a specific order.
6. Using ChainMap from collections - ChainMap groups multiple dictionaries together to create a single, updateable view.
This is useful when you have multiple dictionaries representing different scopes and you want to search through them as a single entity.
7. Using dict.get() Method for Safe Access - The get() method allows you to safely access dictionary values without worrying about KeyError exceptions.
It returns None or a specified default value if the key is not present.
8. setdefault() Method - The setdefault() method returns the value of a key if it is in the dictionary.
If not, it inserts the key with a specified default value.
the syntax for setdefault():
dictionary.setdefault(key, default_value)
9. Dictionary Views (keys(), values(), items()) - Python dictionaries provide dynamic views of their keys, values, and items, which reflect changes to the dictionary.
10. pop() and popitem() Methods - pop(key): Removes the specified key and returns its value. Raises a KeyError if the key is not found.
popitem(): Removes and returns the last (key, value) pair as a tuple. Raises a KeyError if the dictionary is empty.
11. Sorting Dictionaries - Dictionaries can be sorted by keys or values using the sorted() function. This returns a list of tuples.
12. Dictionary Mapping and Transformation - Transform dictionaries using map() or comprehensions for efficient data manipulation.



